esphome:
  name: ${name}
  on_boot:
    priority: 600
    then:
      - delay: 10ms
      - if:
          condition:
            - binary_sensor.is_on: nac_input
          then:
            - script.execute:
                id: set_effect
                number: !lambda |-
                  return id(active_effect);
            - switch.turn_on: shunt

esp32:
  board: esp32doit-devkit-v1
  #board: esp32dev

i2c:
  frequency: 800kHz
  scl: ${gpio_scl}
  sda: ${gpio_sda}

font:
  - file: 'FreeSans.ttf'
    id: font1
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      it.print(0, 0, id(font1), "Fire Sequencer!");
      it.printf(0, 15, id(font1), "Shunt: %s", id(shunt).state ? "On" : "Off");
      it.printf(0, 30, id(font1), "Code: %s",  id(code).get_effect_name() != "None" ? "On":  id(code).current_values.is_on() ? "On" : "Off" );
      it.printf(0, 45, id(font1), "%s", id(code).get_effect_name().c_str()  );

button:
- platform: safe_mode
  name: Safe Mode Boot
  entity_category: diagnostic

output:
  - platform: gpio
    pin: ${gpio_relay}
    id: gpio_relay

  - platform: gpio
    pin: ${gpio_led}
    id: gpio_led
    inverted: ${gpio_led_invert}

switch:
  - platform: gpio
    pin: ${gpio_reverse}
    id: reverse
    name: reverse

  - platform: gpio
    pin: ${gpio_shunt}
    id: shunt
    name: shunt

  - platform: gpio
    pin: ${gpio_trigger}
    id: trigger
    name: trigger

light:
  - platform: binary
    output: gpio_relay
    id: relay
    name: relay
    internal: true

  - platform: binary
    output: gpio_led
    id: led
    name: led
    internal: true

  - platform: partition
    id: code
    name: code
    segments:
      - single_light_id: relay
      - single_light_id: led
    effects:
      - strobe:
          name: March 20
          colors:
            - state: true
              duration: 1500ms
            - state: false
              duration: 1500ms

      - strobe:
          name: March 30
          colors:
            - state: true
              duration: 1000ms
            - state: false
              duration: 1000ms

      - strobe:
          name: March 60
          colors:
            - state: true
              duration: 500ms
            - state: false
              duration: 500ms

      - strobe:
          name: March 90
          colors:
            - state: true
              duration: 333ms
            - state: false
              duration: 333ms

      - strobe:
          name: March 120
          colors:
            - state: true
              duration: 250ms
            - state: false
              duration: 250ms

      - strobe:
          name: March 150
          colors:
            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

      - strobe:
          name: March 180
          colors:
            - state: true
              duration: 166ms
            - state: false
              duration: 166ms

      - strobe:
          name: March 200
          colors:
            - state: true
              duration: 150ms
            - state: false
              duration: 150ms

      - strobe:
          name: March 250
          colors:
            - state: true
              duration: 120ms
            - state: false
              duration: 120ms

      - strobe:
          name: March 300 / Steady T4
          colors:
            - state: true
              duration: 100ms
            - state: false
              duration: 100ms

      - strobe:
          name: March 150 Fun
          colors:
            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms


            - state: true
              duration: 66ms
            - state: false
              duration: 66ms

            - state: true
              duration: 66ms
            - state: false
              duration: 66ms

            - state: true
              duration: 66ms
            - state: false
              duration: 66ms

      - strobe:
          name: Standard March
          colors:
            - state: true
              duration: 150ms
            - state: false
              duration: 400ms

      - lambda:
          name: Shart Sync
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();


            if (state == 1 || state == 116 || state == 231 || state == 346  ||
                (state > 356 && state < 362 )  ||    (state > 367 &&  state < 373 )   || (state > 378 &&  state < 384)  ||
                (state >389 && state < 394) ||  (state > 395 && state < 397)     ) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 394 || state == 395) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }

            state += 1;
            if (state == 448)
              state = 0;

      - lambda:
          name: Smart Sync
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            static int inverse = 0;
            if (initial_run) {
              state = 0;
              id(shunt).turn_on();
              id(reverse).turn_off();
            }
            auto call = id(code).turn_on();


            if (state == 1 || state == 2 || state == 114 || state == 115 || state == 227 || state == 228 ||  state == 340 || state == 341 ||
                  (state >= 345 && state < 347  )   || state == 453 || state == 454 || state ==  566 || state == 567 || state == 679 || state == 680 || state == 792 || state == 793) {
              call.set_brightness(0);
              inverse = 1;
            } else {
              inverse = 0;
            }

            call.set_publish(false);
            call.perform();

            if (state >= 344 && state <= 348 ) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }

            state += 1;
            if (state == 905)
              state = 0;


      - lambda:
          name: Smart Sync March
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            static int inverse = 0;
            if (initial_run) {
              state = 0;
              id(shunt).turn_on();
              id(reverse).turn_off();
            }
            auto call = id(code).turn_on();


            if (state == 1 || state == 2 || state == 114 || state == 115 || state == 227 || state == 228 ||  state == 340 || state == 341 ||
                 (state >= 344 && state <= 348  )   || state == 453 || state == 454 || state ==  566 || state == 567 || state == 679 || state == 680 || state == 792 || state == 793) {
              call.set_brightness(0);
              inverse = 1;
            } else {
              inverse = 0;
            }

            call.set_publish(false);
            call.perform();

            if (state >= 344 && state <= 348 ) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }

            state += 1;
            if (state == 905)
              state = 0;



      - lambda:
          name: Smart Sync Silence
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();

            if (state == 1 || state == 115 || state == 229 || state == 343 ||
               state == 457 || state == 571 || state == 685 || state == 820 || state == 822 || state == 824 ) {
              call.set_brightness(0);
            }


            if (state >799 && state <827) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }


            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 914)
              state = 0;

      - strobe:
          name: Smart Sync Old Silence
          colors:
            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 999ms

            - state: false
              duration: 250ms
            - state: true
              duration: 750ms

      - lambda:
          name: California Code
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state >20) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 30)
              state = 0;


      - lambda:
          name: Firecom
          update_interval: 1500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state == 11 ) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state <11 && state != 0) {
              id(trigger).turn_off();
            } else {
              id(trigger).turn_on();
            }

            state += 1;
            if (state == 20)
              state = 0;

      - lambda:
          name: Firecom Whoop
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_off();
            id(trigger).turn_off();


      - lambda:
          name: Firecom Chime
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_off();
            id(trigger).turn_on();

      - lambda:
          name: Firecom Pulsed Tone
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_on();
            id(trigger).turn_on();

      - lambda:
          name: Firecom Steady Tone
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_on();
            id(trigger).turn_off();

      - lambda:
          name: Pulsed California Code
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state > 40 || state % 2 == 0) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 60)
              state = 0;

      - lambda:
          name: 4-4
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5 && state != 7 &&
               state != 12 && state != 14 && state != 16 && state != 18) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 38)
              state = 0;


      - lambda:
          name: 4-4-4-4
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5 && state != 7 &&
               state != 12 && state != 14 && state != 16 && state != 18 &&
               state != 23 && state != 25 && state != 27 && state != 29 &&
               state != 34 && state != 36 && state != 38 && state != 40) {
              call.set_brightness(0);
            }

            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 60)
              state = 0;

      - lambda:
          name: Temporal 3
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 8)
              state = 0;

      - lambda:
          name: Temporal 4
          update_interval: 100ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5 && state != 7) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 57)
              state = 0;

      - lambda:
          name: Temporal 2
          update_interval: 115ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 8)
              state = 0;


      - lambda:
          name: Federal Signal Siren
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state >12) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 24)
              state = 0;

      - lambda:
          name: Fast Wail
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state >4) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 8)
              state = 0;


globals:
 - id: active_effect
   type: int
   restore_value: yes
   initial_value: '0'
 - id: effects
   type: int
   initial_value: '8'
 - id: march_effects
   type: int
   initial_value: '12'
 - id: code_effects
   type: int
   initial_value: '11'


sensor:
  - platform: wifi_signal
    name: "$name WiFi Signal"
    update_interval: 5min

  - platform: uptime
    name: "$name Uptime"
    id: uptime_sensor
    update_interval: 5min

script:
  - id: set_effect
    parameters:
      number: int
    then:
      - lambda: |-

          ESP_LOGD("status", "effect: %d", number);

          id(reverse).turn_off();
          id(trigger).turn_off();

          auto call = id(code).turn_on();
          switch (number) {
            case 1:
              call.set_effect("None");
              break;
            case 2:
              call.set_effect("Temporal 2");
              break;
            case 3:
              call.set_effect("Temporal 3");
              break;
            case 4:
              call.set_effect("Temporal 4");
              break;
            case 5:
              call.set_effect("California Code");
              break;
            case 6:
              call.set_effect("Pulsed California Code");
              break;
            case 7:
              call.set_effect("4-4");
              break;
            case 8:
              call.set_effect("4-4-4-4");
              break;
            case 9:
              call.set_effect("March 20");
              break;
            case 10:
              call.set_effect("March 30");
              break;
            case 11:
              call.set_effect("March 60");
              break;
            case 12:
              call.set_effect("March 90");
              break;
            case 13:
              call.set_effect("March 120");
              break;
            case 14:
              call.set_effect("March 150");
              break;
            case 15:
              call.set_effect("March 180");
              break;
            case 16:
              call.set_effect("March 200");
              break;
            case 17:
              call.set_effect("March 250");
              break;
            case 18:
              call.set_effect("March 300 / Steady T4");
              break;
            case 19:
              call.set_effect("Standard March");
              break;
            case 20:
              call.set_effect("March 150 Fun");
              break;
            case 21:
              call.set_effect("Federal Signal Siren");
              break;
            case 22:
              call.set_effect("Shart Sync");
              break;
            case 23:
              call.set_effect("Smart Sync");
              break;
            case 24:
              call.set_effect("Smart Sync March");
              break;
            case 25:
              call.set_effect("Smart Sync Silence");
              break;
            case 26:
              call.set_effect("Fast Wail");
              break;
            case 27:
              call.set_effect("Firecom");
              break;
            case 28:
              call.set_effect("Firecom Chime");
              break;
            case 29:
              call.set_effect("Firecom Whoop");
              break;
            case 30:
              call.set_effect("Firecom Pulsed Tone");
              break;
            case 31:
              call.set_effect("Firecom Steady Tone");
              break;
            default:
              id(code).turn_on().set_effect("None").perform();
              call.set_brightness(0);
              break;
          }
          call.perform();

binary_sensor:
  - platform: gpio
    pin:
      number: ${gpio_fire_up}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms

    name: "Fire Up"
    on_click:
      - lambda: !lambda |-
          id(active_effect) += 1;
          if ((id(active_effect) < 0) || (id(active_effect) > id(effects))) {
              id(active_effect) = 0;
              id(set_effect)->execute(0);
          } else {
              id(set_effect)->execute(id(active_effect));
          }

  - platform: gpio
    pin:
      number: ${gpio_fire_down}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms

    name: "Fire Down"
    on_click:
      - lambda: !lambda |-
          id(active_effect) -= 1;
          if ((id(active_effect) < 0) || (id(active_effect) > id(effects)))  {
              id(active_effect) = id(effects);
              id(set_effect)->execute(id(effects));
          } else {
              id(set_effect)->execute(id(active_effect));
          }


  - platform: gpio
    pin:
      number: ${gpio_march_up}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    name: "March Up"
    on_click:
      - lambda: !lambda |-
          id(active_effect) += 1;
          if ((id(active_effect) <= id(effects)) || (id(active_effect) > id(effects) + id(march_effects))) {
              id(active_effect) = id(effects) + 1;
              id(set_effect)->execute(id(active_effect));
          } else {
              id(set_effect)->execute(id(active_effect));
          }

  - platform: gpio
    pin:
      number: ${gpio_march_down}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms

    name: "March Down"
    on_click:
      - lambda: !lambda |-
          id(active_effect) -= 1;
          if ((id(active_effect) <= id(effects)) || (id(active_effect) > id(effects) + id(march_effects))) {
              id(active_effect) = id(effects) + id(march_effects);
              id(set_effect)->execute(id(active_effect));
          } else {
              id(set_effect)->execute(id(active_effect));
          }

  - platform: gpio
    pin:
      number: ${gpio_code_up}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    name: "Code Up"
    on_click:
      - lambda: !lambda |-
          id(active_effect) += 1;
          if ((id(active_effect) <= id(effects) + id(march_effects)) || (id(active_effect) > id(effects) + id(march_effects) + id(code_effects))) {
              id(active_effect) = id(effects) + id(march_effects) + 1;
              id(set_effect)->execute(id(active_effect));
          } else {
              id(set_effect)->execute(id(active_effect));
          }

  - platform: gpio
    pin:
      number: ${gpio_code_down}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms

    name: "Code Down"
    on_click:
      - lambda: !lambda |-
          id(active_effect) -= 1;
          if ((id(active_effect) <= id(effects) + id(march_effects)) || (id(active_effect) > id(effects) + id(march_effects) + id(code_effects))) {
              id(active_effect) = id(effects) + id(march_effects) + id(code_effects);
              id(set_effect)->execute(id(active_effect));
          } else {
              id(set_effect)->execute(id(active_effect));
          }

  - platform: gpio
    pin:
      number: ${gpio_mode_up}
      mode:
        input: true
    filters:
      - delayed_on: 10ms

    name: "Mode Up"

  - platform: gpio
    pin:
      number: ${gpio_mode_down}
      mode:
        input: true
    filters:
      - delayed_on: 10ms

    name: "Mode Down"

  - platform: gpio
    pin:
      number: ${gpio_toggle}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms

    name: "Toggle"
    on_click:
      then:
        - if:
            condition:
                - switch.is_on: shunt
            then:
              - light.turn_off: code
              - switch.turn_off: shunt
            else:
              - script.execute:
                  id: set_effect
                  number: !lambda |-
                    return id(active_effect);
              - switch.turn_on: shunt

  - platform: gpio
    pin:
      number: ${gpio_nac}
      inverted: ${gpio_nac_invert}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 100ms
    id: nac_input
    name: "NAC Input"
    on_press:
      - script.execute:
          id: set_effect
          number: !lambda |-
            return id(active_effect);
      - switch.turn_on: shunt
    on_release:
      - light.turn_off: code
      - switch.turn_off: shunt

# Enable logging
#logger:
  #  level: VERBOSE

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  reboot_timeout: 0s
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: !secret wifi_portal_ssid
#    password: !secret wifi_portal_password
#
#captive_portal:

