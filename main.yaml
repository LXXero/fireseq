esphome:
  name: ${name}
  on_boot:
    priority: 500
    then:
      - delay: 66ms
      - if:
          condition:
            - binary_sensor.is_on: zone_input
          then:
            - script.execute:
                id: set_effect
                type: restore
                mode: restore
            - switch.turn_on: shunt

esp32:
  board: esp32doit-devkit-v1
  #board: esp32dev

i2c:
  frequency: 800kHz
  scl: ${gpio_scl}
  sda: ${gpio_sda}

font:
  - file: 'FreeSans.ttf'
    id: font1
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      it.print(0, 0, id(font1), "Fire Sequencer!");
      it.printf(0, 15, id(font1), "Shunt: %s", id(shunt).state ? "On" : "Off");
      it.printf(0, 30, id(font1), "Code: %s",  id(code).get_effect_name() != "None" ? "On":  id(code).current_values.is_on() ? "On" : "Off" );
      it.printf(0, 45, id(font1), "%s", id(code).get_effect_name().c_str());

button:
- platform: safe_mode
  name: Safe Mode Boot
  entity_category: diagnostic

output:
  - platform: gpio
    pin: ${gpio_code}
    id: gpio_code

  - platform: gpio
    pin: ${gpio_led}
    id: gpio_led
    inverted: ${gpio_led_invert}

switch:
  - platform: gpio
    pin: ${gpio_reverse}
    id: reverse
    name: reverse
    on_turn_on:
      - if:
          condition:
            - lambda: 'return id(code).get_effect_name() == "None";'
          then:
            - delay: 5000ms
            - switch.turn_off: reverse

  - platform: gpio
    pin: ${gpio_shunt}
    id: shunt
    name: shunt
    on_turn_on:
      - if:
          condition:
            - lambda: 'return id(code).get_effect_name() == "None";'
          then:
            - delay: 5000ms
            - switch.turn_off: shunt


  - platform: gpio
    pin: ${gpio_trigger}
    id: trigger
    name: trigger
    on_turn_on:
      - if:
          condition:
            - lambda: 'return id(code).get_effect_name() == "None";'
          then:
            - delay: 5000ms
            - switch.turn_off: trigger

light:
  - platform: binary
    output: gpio_code
    id: relay
    name: relay
    internal: true

  - platform: binary
    output: gpio_led
    id: led
    name: led
    internal: true

  - platform: partition
    id: code
    name: code
    on_state:
      - if:
          condition:
             - lambda: 'return id(code).get_effect_name() == "None" && ! id(code).current_values.is_on();'
          then:
            - switch.turn_off: shunt
            - switch.turn_off: reverse
            - switch.turn_off: trigger
      - delay: 10ms
      - if:
          condition:
            - lambda: 'return id(code).get_effect_name() == "None" && id(code).current_values.is_on();'
          then:
            - delay: 5000ms
            - light.turn_off: code

    segments:
      - single_light_id: relay
      - single_light_id: led
    effects:
      - lambda:
          name: 'On'
          update_interval: 250ms
          lambda: ''

      - lambda:
          name: 'Off'
          update_interval: 250ms
          lambda: |-
            auto call = id(code).turn_on();
            id(code).turn_on().set_effect("Off").set_publish(false).perform();
            call.set_brightness(0);
            call.set_publish(false);
            call.perform();

      - strobe:
          name: March 20
          colors:
            - state: true
              duration: 1500ms
            - state: false
              duration: 1500ms

      - strobe:
          name: March 30
          colors:
            - state: true
              duration: 1000ms
            - state: false
              duration: 1000ms

      - strobe:
          name: March 60
          colors:
            - state: true
              duration: 500ms
            - state: false
              duration: 500ms

      - strobe:
          name: March 90
          colors:
            - state: true
              duration: 333ms
            - state: false
              duration: 333ms


      - strobe:
          name: March 100
          colors:
            - state: true
              duration: 300ms
            - state: false
              duration: 300ms


      - strobe:
          name: March 120
          colors:
            - state: true
              duration: 250ms
            - state: false
              duration: 250ms

      - strobe:
          name: March 150
          colors:
            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

      - strobe:
          name: March 180
          colors:
            - state: true
              duration: 166ms
            - state: false
              duration: 166ms

      - strobe:
          name: March 200
          colors:
            - state: true
              duration: 150ms
            - state: false
              duration: 150ms

      - strobe:
          name: March 250
          colors:
            - state: true
              duration: 120ms
            - state: false
              duration: 120ms

      - strobe:
          name: March 300 / Steady T4
          colors:
            - state: true
              duration: 100ms
            - state: false
              duration: 100ms

      - strobe:
          name: March 150 Fun
          colors:
            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms

            - state: true
              duration: 200ms
            - state: false
              duration: 200ms


            - state: true
              duration: 66ms
            - state: false
              duration: 66ms

            - state: true
              duration: 66ms
            - state: false
              duration: 66ms

            - state: true
              duration: 66ms
            - state: false
              duration: 66ms

      - strobe:
          name: Standard March
          colors:
            - state: true
              duration: 150ms
            - state: false
              duration: 400ms

      - lambda:
          name: Shart Sync
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();


            if (state == 1 || state == 116 || state == 231 || state == 346  ||
                (state > 356 && state < 362 )  ||    (state > 367 &&  state < 373 )   || (state > 378 &&  state < 384)  ||
                (state >389 && state < 394) ||  (state > 395 && state < 397)     ) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 394 || state == 395) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }

            state += 1;
            if (state == 448)
              state = 0;

      - lambda:
          name: Smart Sync
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            static int inverse = 0;
            if (initial_run) {
              state = 0;
              id(shunt).turn_on();
              id(reverse).turn_off();
            }
            auto call = id(code).turn_on();


            if (state == 1 || state == 2 || state == 114 || state == 115 || state == 227 || state == 228 ||  state == 340 || state == 341 ||
                  (state >= 345 && state < 347  )   || state == 453 || state == 454 || state ==  566 || state == 567 || state == 679 || state == 680 || state == 792 || state == 793) {
              call.set_brightness(0);
              inverse = 1;
            } else {
              inverse = 0;
            }

            call.set_publish(false);
            call.perform();

            if (state >= 344 && state <= 348 ) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }

            state += 1;
            if (state == 905)
              state = 0;


      - lambda:
          name: Smart Sync March
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            static int inverse = 0;
            if (initial_run) {
              state = 0;
              id(shunt).turn_on();
              id(reverse).turn_off();
            }
            auto call = id(code).turn_on();


            if (state == 1 || state == 2 || state == 114 || state == 115 || state == 227 || state == 228 ||  state == 340 || state == 341 ||
                 (state >= 344 && state <= 348  )   || state == 453 || state == 454 || state ==  566 || state == 567 || state == 679 || state == 680 || state == 792 || state == 793) {
              call.set_brightness(0);
              inverse = 1;
            } else {
              inverse = 0;
            }

            call.set_publish(false);
            call.perform();

            if (state >= 344 && state <= 348 ) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }

            state += 1;
            if (state == 905)
              state = 0;



      - lambda:
          name: Smart Sync Silence
          update_interval: 0ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();

            if (state == 1 || state == 115 || state == 229 || state == 343 ||
               state == 457 || state == 571 || state == 685 || state == 820 || state == 822 || state == 824 ) {
              call.set_brightness(0);
            }


            if (state >799 && state <827) {
              id(shunt).turn_off();
              id(reverse).turn_on();
            } else {
              id(shunt).turn_on();
              id(reverse).turn_off();
            }


            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 914)
              state = 0;

      - strobe:
          name: Smart Sync Old Silence
          colors:
            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 975ms

            - state: false
              duration: 10ms
            - state: true
              duration: 999ms

            - state: false
              duration: 250ms
            - state: true
              duration: 750ms

      - lambda:
          name: California Code
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state >20) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 30)
              state = 0;


      - lambda:
          name: Firecom
          update_interval: 1500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state == 11 ) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state <11 && state != 0) {
              id(trigger).turn_off();
            } else {
              id(trigger).turn_on();
            }

            state += 1;
            if (state == 20)
              state = 0;

      - lambda:
          name: Firecom Whoop
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_off();
            id(trigger).turn_off();


      - lambda:
          name: Firecom Chime
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_off();
            id(trigger).turn_on();

      - lambda:
          name: Firecom Pulsed Tone
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_on();
            id(trigger).turn_on();

      - lambda:
          name: Firecom Steady Tone
          lambda: |-
            id(code).turn_on();
            id(reverse).turn_on();
            id(trigger).turn_off();

      - lambda:
          name: Pulsed California Code
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state > 40 || state % 2 == 0) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 60)
              state = 0;

      - lambda:
          name: 4-4
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5 && state != 7 &&
               state != 12 && state != 14 && state != 16 && state != 18) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 38)
              state = 0;


      - lambda:
          name: 4-4-4-4
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5 && state != 7 &&
               state != 12 && state != 14 && state != 16 && state != 18 &&
               state != 23 && state != 25 && state != 27 && state != 29 &&
               state != 34 && state != 36 && state != 38 && state != 40) {
              call.set_brightness(0);
            }

            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 60)
              state = 0;

      - lambda:
          name: Temporal 3
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 8)
              state = 0;

      - lambda:
          name: Temporal 4
          update_interval: 100ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3 && state != 5 && state != 7) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 57)
              state = 0;

      - lambda:
          name: Temporal 2
          update_interval: 115ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state != 1 && state != 3) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 8)
              state = 0;


      - lambda:
          name: Federal Signal Siren
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state >12) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 24)
              state = 0;

      - lambda:
          name: Fast Wail
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 0 || state >4) {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();
            state += 1;
            if (state == 8)
              state = 0;

      - lambda:
          name: Westminster 16 Note
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 3 || state == 14 || state == 19 || state == 32) {
              call.set_brightness(100);
            } else {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 1 || state == 10 || state == 16 || state == 21 || state == 34) {
              id(reverse).turn_on();
            } else {
              id(reverse).turn_off();
            }

            if (state == 5 || state == 12 || state == 23 || state == 30) {
              id(shunt).turn_on();
            } else {
              id(shunt).turn_off();
            }

            if (state == 7 || state == 25 || state == 28) {
              id(trigger).turn_on();
            } else {
              id(trigger).turn_off();
            }

            auto offcall = id(code).turn_off();
            state += 1;
            if (state == 38)
              offcall.perform();

      - lambda:
          name: Westminster 16 Note 12
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 3 || state == 14 || state == 19 || state == 32 || (state >= 38 && state < 62 && state % 2 == 0)) {
              call.set_brightness(100);
            } else {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 1 || state == 10 || state == 16 || state == 21 || state == 34 || (state >= 38 && state < 62 && state % 2 == 0)) {
              id(reverse).turn_on();
            } else {
              id(reverse).turn_off();
            }

            if (state == 5 || state == 12 || state == 23 || state == 30 || (state >= 38 && state < 62 && state % 2 == 0)) {
              id(shunt).turn_on();
            } else {
              id(shunt).turn_off();
            }

            if (state == 7 || state == 25 || state == 28 || (state >= 38 && state < 62 && state % 2 == 0)) {
              id(trigger).turn_on();
            } else {
              id(trigger).turn_off();
            }

            auto offcall = id(code).turn_off();
            state += 1;
            if (state == 66)
              offcall.perform();

      - lambda:
          name: Westminster
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 1 || state == 14) {
              call.set_brightness(100);
            } else {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 3 || state == 16) {
              id(reverse).turn_on();
            } else {
              id(reverse).turn_off();
            }

            if (state == 5 || state == 12) {
              id(shunt).turn_on();
            } else {
              id(shunt).turn_off();
            }

            if (state == 7 || state == 10) {
              id(trigger).turn_on();
            } else {
              id(trigger).turn_off();
            }

            auto offcall = id(code).turn_off();
            state += 1;
            if (state == 20)
              offcall.perform();

      - lambda:
          name: Westminster 12
          update_interval: 500ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 1 || state == 14 || (state >= 20 && state < 44 && state % 2 == 0) ) {
              call.set_brightness(100);
            } else {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 3 || state == 16 || (state >= 20 && state < 44 && state % 2 == 0) ) {
              id(reverse).turn_on();
            } else {
              id(reverse).turn_off();
            }

            if (state == 5 || state == 12 || (state >= 20 && state < 44 && state % 2 == 0) )  {
              id(shunt).turn_on();
            } else {
              id(shunt).turn_off();
            }

            if (state == 7 || state == 10 || (state >= 20 && state < 44 && state % 2 == 0) ) {
              id(trigger).turn_on();
            } else {
              id(trigger).turn_off();
            }

            auto offcall = id(code).turn_off();
            state += 1;
            if (state == 46)
              offcall.perform();

      - lambda:
          name: Turkey
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 1 || state == 23 || state == 25 || state == 27 || state == 33) {
              call.set_brightness(100);
            } else {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 5 || state == 7 || state == 9 || state == 19 || state == 29) {
              id(reverse).turn_on();
            } else {
              id(reverse).turn_off();
            }

            if (state == 3 || state == 21 || state == 31 || state == 35 || state == 37) {
              id(shunt).turn_on();
            } else {
              id(shunt).turn_off();
            }

            if (state == 11 || state == 13 || state == 15 || state == 17) {
              id(trigger).turn_on();
            } else {
              id(trigger).turn_off();
            }

            auto offcall = id(code).turn_off();
            state += 1;
            if (state == 38)
              offcall.perform();

      - lambda:
          name: Ding Dong
          update_interval: 250ms
          lambda: |-
            static int state = 0;
            if (initial_run) {
              state = 0;
            }
            auto call = id(code).turn_on();
            if (state == 1 || state == 11) {
              call.set_brightness(100);
            } else {
              call.set_brightness(0);
            }
            call.set_publish(false);
            call.perform();

            if (state == 3 || state == 13) {
              id(reverse).turn_on();
            } else {
              id(reverse).turn_off();
            }

            auto offcall = id(code).turn_off();
            state += 1;
            if (state == 15)
              offcall.perform();

globals:
 - id: effect_type
   type: short
   restore_value: yes
   initial_value: '0'


 - id: effect
   type: short
   restore_value: yes
   initial_value: '0'

 - id: fire_effects
   type: std::vector<std::string>
   initial_value: '{
     "On",
     "Temporal 2",
     "Temporal 3",
     "Temporal 4",
     "California Code",
     "Pulsed California Code",
     "4-4",
     "4-4-4-4",
     "Off"
   }'

 - id: march_effects
   type: std::vector<std::string>
   initial_value: '{
     "March 20",
     "March 30",
     "March 60",
     "March 90",
     "March 100",
     "March 120",
     "March 150",
     "March 180",
     "March 200",
     "March 250",
     "March 300 / Steady T4",
     "Standard March",
     "March 150 Fun"
   }'

 - id: code_effects
   type: std::vector<std::string>
   initial_value: '{
     "Federal Signal Siren",
     "Shart Sync",
     "Smart Sync",
     "Smart Sync March",
     "Smart Sync Silence",
     "Fast Wail",
     "Firecom",
     "Firecom Chime",
     "Firecom Whoop",
     "Firecom Pulsed Tone",
     "Firecom Steady Tone"
   }'

 - id: doorbell_effects
   type: std::vector<std::string>
   initial_value: '{
     "Westminster",
     "Westminster 12",
     "Westminster 16 Note",
     "Westminster 16 Note 12",
     "Turkey",
     "Ding Dong"
   }'

sensor:
  - platform: wifi_signal
    name: "$name WiFi Signal"
    update_interval: 5min

  - platform: uptime
    name: "$name Uptime"
    id: uptime_sensor
    update_interval: 5min

script:
  - id: set_effect
    parameters:
      type: std::string
      mode: std::string
    then:
      - lambda: |-
          id(reverse).turn_off();
          id(trigger).turn_off();

          std::vector<std::string> list;
          int type_id;

          if (type == "fire" || (type == "restore" && id(effect_type) == 0)) {
            list = id(fire_effects);
            type_id = 0;
          } else if (type == "march" || (type == "restore" && id(effect_type) == 1)) {
            list = id(march_effects);
            type_id = 1;
          } else if (type == "code" || (type == "restore" && id(effect_type) == 2))  {
            list = id(code_effects);
            type_id = 2;
          } else if (type == "doorbell" || (type == "restore" && id(effect_type) == 3)) {
            list = id(doorbell_effects);
            type_id = 3;
          }

          int key = 0;
          std::map<int, std::string> map;

          for ( auto value : list ) {
              map[key] = value;
              key += 1;
           }

          int next_id;;
          bool not_found;

          if (id(effect_type) == type_id) {
            not_found = find(list.begin(), list.end(), map[id(effect)]) == list.end();
          } else {
            not_found = true;
          }

          if (mode == "down" && (not_found || id(effect) - 1 < 0)) {
            next_id = list.size() - 1;
          } else if (mode == "down") {
            next_id = id(effect) - 1;
          } else if (mode == "up" && (not_found || id(effect) + 1 >= list.size())) {
            next_id = 0;
          } else if (mode == "up") {
            next_id = id(effect) + 1;
          } else {
            next_id = id(effect);
          }

          std::string next_effect = map[next_id];
          ESP_LOGD("status", "set_effect - type: %s - mode: %s - list size: %i - item %s - effect: %s", type.c_str(), mode.c_str(), list.size(), not_found ? "not found" : "found", next_effect.c_str());

          auto call = id(code).turn_on();
          call.set_effect(next_effect);
          call.perform();
          id(effect_type) = type_id;
          id(effect) = next_id;

binary_sensor:
  - name: "Fire Up"
    platform: gpio
    pin:
      number: ${gpio_fire_up}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
      - script.execute:
          id: set_effect
          mode: up
          type: fire

  - name: "Fire Down"
    platform: gpio
    pin:
      number: ${gpio_fire_down}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
      - script.execute:
          id: set_effect
          mode: down
          type: fire

  - name: "March Up"
    platform: gpio
    pin:
      number: ${gpio_march_up}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
      - script.execute:
          id: set_effect
          type: march
          mode: up

  - name: "March Down"
    platform: gpio
    pin:
      number: ${gpio_march_down}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
    - script.execute:
        id: set_effect
        type: march
        mode: down

  - name: "Code Up"
    platform: gpio
    pin:
      number: ${gpio_code_up}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
    - script.execute:
        id: set_effect
        type: code
        mode: up

  - name: "Code Down"
    platform: gpio
    pin:
      number: ${gpio_code_down}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
    - script.execute:
        id: set_effect
        type: code
        mode: down

  - name: "Toggle"
    platform: gpio
    pin:
      number: ${gpio_toggle}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
    on_click:
      then:
        - if:
            condition:
                - switch.is_on: shunt
            then:
              - light.turn_off: code
            else:
              - script.execute:
                  id: set_effect
                  type: restore
                  mode: restore
              - switch.turn_on: shunt

  - name: "Zone Input"
    id: zone_input
    platform: gpio
    pin:
      number: ${gpio_zone}
      inverted: ${gpio_zone_invert}
      mode:
        input: true
        pulldown: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 100ms
    on_press:
      - script.execute:
          id: set_effect
          type: restore
          mode: restore
      - switch.turn_on: shunt
    on_release:
      - light.turn_off: code

  - id: doorbell_input
    name: "Doorbell Input"
    platform: gpio
    pin:
      number: ${gpio_doorbell}
      inverted: false
      mode:
        input: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 100ms
    on_press:
      - if:
          condition:
            lambda: 'return id(code).get_effect_name() == "None" && ! id(code).current_values.is_on();'
          then:
            script.execute:
              id: set_effect
              type: doorbell
              mode: up

# Enable logging
logger:
    level: VERBOSE

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  reboot_timeout: 0s
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: !secret wifi_portal_ssid
#    password: !secret wifi_portal_password
#
#captive_portal:

